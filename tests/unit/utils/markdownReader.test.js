const { readThemesFromMarkdown } = require("../../../src/utils/markdownReader");
const fs = require("fs");

// Mock fs module
jest.mock("fs");

describe("readThemesFromMarkdown", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("should read themes from markdown file", async () => {
    const mockContent = `# User Feedback Themes

Generated from 3 thematic feedback groups.

- Users want dark mode for better visibility
- Mobile app performance needs improvement
- Interface should be more intuitive

---
*Generated by AI Agent Builder - Phase 1*`;

    fs.readFile.mockImplementation((path, encoding, callback) => {
      callback(null, mockContent);
    });

    const themes = await readThemesFromMarkdown("test-themes.md");

    expect(themes).toHaveLength(3);
    expect(themes[0]).toBe("Users want dark mode for better visibility");
    expect(themes[1]).toBe("Mobile app performance needs improvement");
    expect(themes[2]).toBe("Interface should be more intuitive");
  });

  it("should handle empty file", async () => {
    const mockContent = `# User Feedback Themes

Generated from 0 thematic feedback groups.

---
*Generated by AI Agent Builder - Phase 1*`;

    fs.readFile.mockImplementation((path, encoding, callback) => {
      callback(null, mockContent);
    });

    const themes = await readThemesFromMarkdown("empty-themes.md");

    expect(themes).toHaveLength(0);
  });

  it("should ignore non-bullet lines", async () => {
    const mockContent = `# User Feedback Themes

Some description here
- Users want dark mode
More text here
- Mobile performance issues
- Interface improvements

---
*Generated by AI Agent Builder - Phase 1*`;

    fs.readFile.mockImplementation((path, encoding, callback) => {
      callback(null, mockContent);
    });

    const themes = await readThemesFromMarkdown("test-themes.md");

    expect(themes).toHaveLength(3);
    expect(themes).toEqual([
      "Users want dark mode",
      "Mobile performance issues",
      "Interface improvements",
    ]);
  });

  it("should handle file read error", async () => {
    const error = new Error("File not found");
    fs.readFile.mockImplementation((path, encoding, callback) => {
      callback(error, null);
    });

    await expect(readThemesFromMarkdown("nonexistent.md")).rejects.toThrow(
      "File not found"
    );
  });

  it("should handle malformed content", async () => {
    const mockContent = "Invalid content without proper structure";

    fs.readFile.mockImplementation((path, encoding, callback) => {
      callback(null, mockContent);
    });

    const themes = await readThemesFromMarkdown("malformed.md");

    expect(themes).toHaveLength(0);
  });
});
